package com.sphenon.basics.space.factories;

/****************************************************************************
  Copyright 2001-2018 Sphenon GmbH

  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations
  under the License.
*****************************************************************************/

import com.sphenon.basics.space.*;
import com.sphenon.basics.space.classes.*;
import com.sphenon.basics.space.factories.*;
import com.sphenon.basics.space.retrievers.*;
import com.sphenon.basics.space.tplinst.*;
import com.sphenon.basics.space.exceptions.*;
import com.sphenon.basics.space.returncodes.*;

import com.sphenon.basics.context.*;
import com.sphenon.basics.context.classes.*;
import com.sphenon.basics.message.*;
import com.sphenon.basics.notification.*;
import com.sphenon.basics.customary.*;
import com.sphenon.basics.exception.*;
import com.sphenon.basics.many.*;
import com.sphenon.basics.many.tplinst.*;
import com.sphenon.basics.event.*;
import com.sphenon.basics.event.tplinst.*;
import com.sphenon.basics.metadata.*;
import com.sphenon.basics.metadata.Type;
import com.sphenon.basics.factory.*;
import com.sphenon.basics.factory.returncodes.*;
import com.sphenon.basics.validation.*;
import com.sphenon.basics.validation.returncodes.*;
import com.sphenon.basics.validation.validators.*;
import com.sphenon.basics.variatives.*;
import com.sphenon.basics.variatives.tplinst.*;


// Template: $Id$




import com.sphenon.ui.core.*;
import com.sphenon.ui.annotations.*;
import com.sphenon.basics.data.*;
import com.sphenon.basics.services.*;
import com.sphenon.basics.space.*;

// java source generated by Mr.Source from UML (UXF)

public class Factory_SpaceOnDemand
  extends Factory_Space  implements  Factory_SpaceOnDemand_
 {
  static protected long notification_level;
  static public    long adjustNotificationLevel(long new_level) { long old_level = notification_level; notification_level = new_level; return old_level; }
  static public    long getNotificationLevel() { return notification_level; }
  static {
      notification_level = NotificationLocationContext.getLevel(RootContext.getInitialisationContext(), "com.sphenon.basics.space.factories.Factory_SpaceOnDemand");
  };

  private Class_SpaceOnDemand internal_instance;

  public Factory_SpaceOnDemand (CallContext call_context) {
    super(call_context);
    CallContext context = call_context;
  }

  // geht nicht, weil sonst nach erneutem aendern eines
  // Attributes dieses nicht wieder validiert wird
  // protected boolean _do_validation_Factory_SpaceOnDemand ; // Class validation state
  
  public void reset (CallContext context) {
     // _do_validation_Factory_SpaceOnDemand = false;
    super.reset(context);
  }

  protected void prepareInstanceAttributesFactory_SpaceOnDemand (CallContext call_context, Class_SpaceOnDemand instance) {
    CallContext context = call_context;
    super.prepareInstanceAttributesFactory_Space(context, instance);
  }

  public void confirmAttributes_Factory_SpaceOnDemand(CallContext call_context) {
    CallContext context = call_context;  
  }

  // Generelle (und Ã¼berladenen) Methode umalle Attribute
  // jetzt als "gueltig" zu deklarieren
  public void confirmAttributes(CallContext call_context) {
    CallContext context = call_context;    
    confirmAttributes_Factory_SpaceOnDemand(context);
    super.confirmAttributes(context);
  }

  public void validateFinally_Factory_SpaceOnDemand(CallContext call_context) throws ValidationFailure {
    CallContext context = call_context;  
    
  }

 
  // definiert eine Moeglichkeit, abschliessende "teure"
  // Validierung durchzufuehren
  public void validateFinally(CallContext call_context) throws ValidationFailure {
    CallContext context = call_context;    
    if (this.final_validation_required) {
      confirmAttributes_Factory_SpaceOnDemand(context);
      validateFinally_Factory_SpaceOnDemand(context);
      super.validateFinally(context);
    }
  }

  

  public SpaceOnDemand precreateSpaceOnDemand (CallContext call_context) {
    Context context = (Context) call_context;
    if (this.internal_instance == null) {
      this.internal_instance = this.internalCreateInstance(context);
    }
    return this.internal_instance;
  }
  public SpaceOnDemand createSpaceOnDemand (CallContext call_context) throws ValidationFailure {
    Context context = (Context) call_context;
    Class_SpaceOnDemand instance = this.internal_instance;
    this.internal_instance = null;

    confirmAttributes(context);

    validateFactory_SpaceOnDemand(context); // this will throw a validation error.
    validateFinally(context);
   

    if (instance == null) {
      instance = this.internalCreateInstance(context);
    }

    prepareInstanceAttributesFactory_SpaceOnDemand(context, instance);

    instance.initialiseClass_SpaceOnDemand(context);

    try {
        instance.validateinstanceClass_SpaceOnDemand(context);
    } catch (ValidationFailure vf) {
        CustomaryContext.create(context).throwInvalidState(context, vf, FactoryStringPool.get(context, "0.0.5" /* Creation failed, instance is invalid despite valid factory parameters */));
        throw (ExceptionInvalidState) null; // compiler insists
    }
    
    return instance;
  }
  public SpaceOnDemand mustCreateSpaceOnDemand (CallContext call_context) {
    Context context = (Context) call_context;
    Class_SpaceOnDemand instance = this.internal_instance;
    this.internal_instance = null;

    confirmAttributes(context);

     
    try { // this is a must-create - we will throw an uncatchable error if something goes wrong.
        validateFactory_SpaceOnDemand(context);
        validateFinally(context);
    } catch (ValidationFailure vf) {
        CustomaryContext.create(context).throwPreConditionViolation(context, FactoryStringPool.get(context, "0.0.2" /* Creation failed, invalid factory parameters */));
        throw (ExceptionPreConditionViolation) null; // compiler insists
    }
    

    if (instance == null) {
      instance = this.internalCreateInstance(context);
    }

    prepareInstanceAttributesFactory_SpaceOnDemand(context, instance);

    instance.initialiseClass_SpaceOnDemand(context);

    try {
        instance.validateinstanceClass_SpaceOnDemand(context);
    } catch (ValidationFailure vf) {
        CustomaryContext.create(context).throwInvalidState(context, vf, FactoryStringPool.get(context, "0.0.5" /* Creation failed, instance is invalid despite valid factory parameters */));
        throw (ExceptionInvalidState) null; // compiler insists
    }
    
    return instance;
  }
  
    protected Class_SpaceOnDemand internalCreateInstance(CallContext context) {
      return new Class_SpaceOnDemand(context);
    }
  

    static public SpaceOnDemand tryConstruct(CallContext context) {
        return construct(context);
    }

    static public SpaceOnDemand construct(CallContext context)
        // throws ValidationFailure
        // sollte der hier ja werfen duerfen, demnaechst mal vorsichtig enablen
        {
        Factory_SpaceOnDemand __factory__ = new Factory_SpaceOnDemand(context);

        

        // naja, hier muesste die loop ueber die basisklassen attribute hin,
        // das gibts leider aktuell nicht, also warten bis DynMDA laeuft
        return __factory__.mustCreateSpaceOnDemand(context);
    }

    public Object createObject    (CallContext context) throws ValidationFailure {
        return createSpaceOnDemand(context);
    }

    public void validate(CallContext call_context) throws ValidationFailure {
        CallContext context = call_context;
        validateFactory_SpaceOnDemand(context);
    }

    public void validateFactory_SpaceOnDemand(CallContext call_context) throws ValidationFailure {
        Context context = (Context) call_context;
        ValidationFailure vf = validateFactory_SpaceOnDemand(context, null);
        if (vf != null) { throw vf; }
    }

    protected ValidationFailure validateFactory_SpaceOnDemand(CallContext call_context, ValidationFailure vf) {
        Context context = (Context) call_context;
        vf = super.validateFactory_Space(context, vf);
        return vf;
    }

    public SpaceOnDemand mustCreate (CallContext context) {
        return mustCreateSpaceOnDemand(context);
    }

    public Space precreateSpace (CallContext context) {
        return precreateSpaceOnDemand(context);
    }

    public Space createSpace (CallContext context) throws ValidationFailure {
        return createSpaceOnDemand(context);
    }

    public Space mustCreateSpace (CallContext context) {
        return mustCreateSpaceOnDemand(context);
    }
  

  

  

}


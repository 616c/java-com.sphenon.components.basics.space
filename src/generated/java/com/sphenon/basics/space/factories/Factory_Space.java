package com.sphenon.basics.space.factories;

/****************************************************************************
  Copyright 2001-2018 Sphenon GmbH

  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations
  under the License.
*****************************************************************************/

import com.sphenon.basics.space.*;
import com.sphenon.basics.space.classes.*;
import com.sphenon.basics.space.factories.*;
import com.sphenon.basics.space.retrievers.*;
import com.sphenon.basics.space.tplinst.*;
import com.sphenon.basics.space.exceptions.*;
import com.sphenon.basics.space.returncodes.*;

import com.sphenon.basics.context.*;
import com.sphenon.basics.context.classes.*;
import com.sphenon.basics.message.*;
import com.sphenon.basics.notification.*;
import com.sphenon.basics.customary.*;
import com.sphenon.basics.exception.*;
import com.sphenon.basics.many.*;
import com.sphenon.basics.many.tplinst.*;
import com.sphenon.basics.event.*;
import com.sphenon.basics.event.tplinst.*;
import com.sphenon.basics.metadata.*;
import com.sphenon.basics.metadata.Type;
import com.sphenon.basics.factory.*;
import com.sphenon.basics.factory.returncodes.*;
import com.sphenon.basics.validation.*;
import com.sphenon.basics.validation.returncodes.*;
import com.sphenon.basics.validation.validators.*;
import com.sphenon.basics.variatives.*;
import com.sphenon.basics.variatives.tplinst.*;


// Template: $Id$




import com.sphenon.ui.core.*;
import com.sphenon.ui.annotations.*;
import com.sphenon.basics.data.*;
import com.sphenon.basics.services.*;
import com.sphenon.basics.space.*;

// java source generated by Mr.Source from UML (UXF)

public class Factory_Space implements Factory,  Factory_Space_
 {
  static protected long notification_level;
  static public    long adjustNotificationLevel(long new_level) { long old_level = notification_level; notification_level = new_level; return old_level; }
  static public    long getNotificationLevel() { return notification_level; }
  static {
      notification_level = NotificationLocationContext.getLevel(RootContext.getInitialisationContext(), "com.sphenon.basics.space.factories.Factory_Space");
  };

  private Class_Space internal_instance;

  public Factory_Space (CallContext call_context) {
   this.final_validation_required = true;
    CallContext context = call_context;
  }

  // geht nicht, weil sonst nach erneutem aendern eines
  // Attributes dieses nicht wieder validiert wird
  // protected boolean _do_validation_Factory_Space ; // Class validation state
  
  public void reset (CallContext context) {
     // _do_validation_Factory_Space = false;
    this.id = null;
    this._do_validation_id = false;
    this._modified_id = false;
    this.name = null;
    this._do_validation_name = false;
    this._modified_name = false;
    super_space_vector = null;
    sub_space_vector = null;
    known_space_vector = null;
    service_vector = null;
    content_vector = null;
    super_space_source_vector = null;
    sub_space_source_vector = null;
    known_space_source_vector = null;
    this.internal_instance = null;
    this.final_validation_required = true;
  }

  protected void prepareInstanceAttributesFactory_Space (CallContext call_context, Class_Space instance) {
    CallContext context = call_context;
    instance.setId(context, this.getId(context));
    instance.setName(context, this.getName(context));
    instance.setSuperSpaces(context, this.getSuperSpaces(context));
    instance.setSubSpaces(context, this.getSubSpaces(context));
    instance.setKnownSpaces(context, this.getKnownSpaces(context));
    instance.setServices(context, this.getServices(context));
    instance.setContents(context, this.getContents(context));
    instance.setSuperSpaceSources(context, this.getSuperSpaceSources(context));
    instance.setSubSpaceSources(context, this.getSubSpaceSources(context));
    instance.setKnownSpaceSources(context, this.getKnownSpaceSources(context));
    
    
    
    
    
    
    
    
    
    
  }

  public void confirmAttributes_Factory_Space(CallContext call_context) {
    CallContext context = call_context;  
    _do_validation_id = true;
    _do_validation_name = true;
  }

  // Generelle (und Ã¼berladenen) Methode umalle Attribute
  // jetzt als "gueltig" zu deklarieren
  public void confirmAttributes(CallContext call_context) {
    CallContext context = call_context;    
    confirmAttributes_Factory_Space(context);
  }

  public void validateFinally_Factory_Space(CallContext call_context) throws ValidationFailure {
    CallContext context = call_context;  
    
  }

  protected boolean final_validation_required = true;
 
  // definiert eine Moeglichkeit, abschliessende "teure"
  // Validierung durchzufuehren
  public void validateFinally(CallContext call_context) throws ValidationFailure {
    CallContext context = call_context;    
    if (this.final_validation_required) {
      confirmAttributes_Factory_Space(context);
      validateFinally_Factory_Space(context);
    this.final_validation_required = false;
    }
  }

  protected String id;
  protected boolean _do_validation_id = false;
  protected boolean _modified_id = false;
  public String getId(CallContext call_context) // uml interface attribute
  { CallContext context = call_context;
    if (! this._modified_id) {
      this.id = this.defaultId(context);
      this._modified_id = true;
    }
    return this.id;
  }
  public void setId(CallContext call_context, String id) // uml interface attribute
  {
   CallContext context = call_context;
    
    
    this.id = id;
    this._do_validation_id = true;
    this.final_validation_required = true;   
    this._modified_id = true;
    
    
  }
  public String defaultId(CallContext call_context) // uml interface attribute
  { CallContext context = call_context;
    return "";
  }
  public void validateId(CallContext call_context) throws ValidationFailure {
    if ( ! _do_validation_id) { return; }
    CallContext context = call_context;
    ValidationFailure vf = null;
    if (vf != null) { throw vf; }
  }
  protected String name;
  protected boolean _do_validation_name = false;
  protected boolean _modified_name = false;
  public String getName(CallContext call_context) // uml interface attribute
  { CallContext context = call_context;
    if (! this._modified_name) {
      this.name = this.defaultName(context);
      this._modified_name = true;
    }
    return this.name;
  }
  public void setName(CallContext call_context, String name) // uml interface attribute
  {
   CallContext context = call_context;
    
    
    this.name = name;
    this._do_validation_name = true;
    this.final_validation_required = true;   
    this._modified_name = true;
    
    
  }
  public String defaultName(CallContext call_context) // uml interface attribute
  { CallContext context = call_context;
    return "";
  }
  public void validateName(CallContext call_context) throws ValidationFailure {
    if ( ! _do_validation_name) { return; }
    CallContext context = call_context;
    ValidationFailure vf = null;
    if (vf != null) { throw vf; }
  }
  protected Vector_Space_long_ super_space_vector;
  public Vector_Space_long_ getSuperSpaces(CallContext call_context) // uml association
  { CallContext context = call_context; 
    return this.super_space_vector;
  }
  public void setSuperSpaces(CallContext call_context, Vector_Space_long_ super_space_vector) // uml association
  { CallContext context = call_context; 
    
    
     this.super_space_vector = super_space_vector;
     this.final_validation_required = true;   
    
    
  }
  public void validateSuperSpaces(CallContext call_context) throws ValidationFailure {
     if (false) { throw (ValidationFailure) null; }
  }
  public Vector_Space_long_ defaultSuperSpaces(CallContext call_context) // uml association
  { CallContext context = call_context;
    return null;
  }
  protected Vector_Space_long_ sub_space_vector;
  public Vector_Space_long_ getSubSpaces(CallContext call_context) // uml association
  { CallContext context = call_context; 
    return this.sub_space_vector;
  }
  public void setSubSpaces(CallContext call_context, Vector_Space_long_ sub_space_vector) // uml association
  { CallContext context = call_context; 
    
    
     this.sub_space_vector = sub_space_vector;
     this.final_validation_required = true;   
    
    
  }
  public void validateSubSpaces(CallContext call_context) throws ValidationFailure {
     if (false) { throw (ValidationFailure) null; }
  }
  public Vector_Space_long_ defaultSubSpaces(CallContext call_context) // uml association
  { CallContext context = call_context;
    return null;
  }
  protected Vector_Space_long_ known_space_vector;
  public Vector_Space_long_ getKnownSpaces(CallContext call_context) // uml association
  { CallContext context = call_context; 
    return this.known_space_vector;
  }
  public void setKnownSpaces(CallContext call_context, Vector_Space_long_ known_space_vector) // uml association
  { CallContext context = call_context; 
    
    
     this.known_space_vector = known_space_vector;
     this.final_validation_required = true;   
    
    
  }
  public void validateKnownSpaces(CallContext call_context) throws ValidationFailure {
     if (false) { throw (ValidationFailure) null; }
  }
  public Vector_Space_long_ defaultKnownSpaces(CallContext call_context) // uml association
  { CallContext context = call_context;
    return null;
  }
  protected Vector_Service_long_ service_vector;
  public Vector_Service_long_ getServices(CallContext call_context) // uml association
  { CallContext context = call_context; 
    return this.service_vector;
  }
  public void setServices(CallContext call_context, Vector_Service_long_ service_vector) // uml association
  { CallContext context = call_context; 
    
    
     this.service_vector = service_vector;
     this.final_validation_required = true;   
    
    
  }
  public void validateServices(CallContext call_context) throws ValidationFailure {
     if (false) { throw (ValidationFailure) null; }
  }
  public Vector_Service_long_ defaultServices(CallContext call_context) // uml association
  { CallContext context = call_context;
    return null;
  }
  protected Vector_Object_long_ content_vector;
  public Vector_Object_long_ getContents(CallContext call_context) // uml association
  { CallContext context = call_context; 
    return this.content_vector;
  }
  public void setContents(CallContext call_context, Vector_Object_long_ content_vector) // uml association
  { CallContext context = call_context; 
    
    
     this.content_vector = content_vector;
     this.final_validation_required = true;   
    
    
  }
  public void validateContents(CallContext call_context) throws ValidationFailure {
     if (false) { throw (ValidationFailure) null; }
  }
  public Vector_Object_long_ defaultContents(CallContext call_context) // uml association
  { CallContext context = call_context;
    return null;
  }
  protected Vector_DataSource_long_ super_space_source_vector;
  public Vector_DataSource_long_ getSuperSpaceSources(CallContext call_context) // uml association
  { CallContext context = call_context; 
    return this.super_space_source_vector;
  }
  public void setSuperSpaceSources(CallContext call_context, Vector_DataSource_long_ super_space_source_vector) // uml association
  { CallContext context = call_context; 
    
    
     this.super_space_source_vector = super_space_source_vector;
     this.final_validation_required = true;   
    
    
  }
  public void validateSuperSpaceSources(CallContext call_context) throws ValidationFailure {
     if (false) { throw (ValidationFailure) null; }
  }
  public Vector_DataSource_long_ defaultSuperSpaceSources(CallContext call_context) // uml association
  { CallContext context = call_context;
    return null;
  }
  protected Vector_DataSource_long_ sub_space_source_vector;
  public Vector_DataSource_long_ getSubSpaceSources(CallContext call_context) // uml association
  { CallContext context = call_context; 
    return this.sub_space_source_vector;
  }
  public void setSubSpaceSources(CallContext call_context, Vector_DataSource_long_ sub_space_source_vector) // uml association
  { CallContext context = call_context; 
    
    
     this.sub_space_source_vector = sub_space_source_vector;
     this.final_validation_required = true;   
    
    
  }
  public void validateSubSpaceSources(CallContext call_context) throws ValidationFailure {
     if (false) { throw (ValidationFailure) null; }
  }
  public Vector_DataSource_long_ defaultSubSpaceSources(CallContext call_context) // uml association
  { CallContext context = call_context;
    return null;
  }
  protected Vector_DataSource_long_ known_space_source_vector;
  public Vector_DataSource_long_ getKnownSpaceSources(CallContext call_context) // uml association
  { CallContext context = call_context; 
    return this.known_space_source_vector;
  }
  public void setKnownSpaceSources(CallContext call_context, Vector_DataSource_long_ known_space_source_vector) // uml association
  { CallContext context = call_context; 
    
    
     this.known_space_source_vector = known_space_source_vector;
     this.final_validation_required = true;   
    
    
  }
  public void validateKnownSpaceSources(CallContext call_context) throws ValidationFailure {
     if (false) { throw (ValidationFailure) null; }
  }
  public Vector_DataSource_long_ defaultKnownSpaceSources(CallContext call_context) // uml association
  { CallContext context = call_context;
    return null;
  }
  

  public Space precreateSpace (CallContext call_context) {
    Context context = (Context) call_context;
    if (this.internal_instance == null) {
      this.internal_instance = this.internalCreateInstance(context);
    }
    return this.internal_instance;
  }
  public Space createSpace (CallContext call_context) throws ValidationFailure {
    Context context = (Context) call_context;
    Class_Space instance = this.internal_instance;
    this.internal_instance = null;

    confirmAttributes(context);

    validateFactory_Space(context); // this will throw a validation error.
    validateFinally(context);
   

    if (instance == null) {
      instance = this.internalCreateInstance(context);
    }

    prepareInstanceAttributesFactory_Space(context, instance);

    instance.initialiseClass_Space(context);

    try {
        instance.validateinstanceClass_Space(context);
    } catch (ValidationFailure vf) {
        CustomaryContext.create(context).throwInvalidState(context, vf, FactoryStringPool.get(context, "0.0.5" /* Creation failed, instance is invalid despite valid factory parameters */));
        throw (ExceptionInvalidState) null; // compiler insists
    }
    
    return instance;
  }
  public Space mustCreateSpace (CallContext call_context) {
    Context context = (Context) call_context;
    Class_Space instance = this.internal_instance;
    this.internal_instance = null;

    confirmAttributes(context);

     
    try { // this is a must-create - we will throw an uncatchable error if something goes wrong.
        validateFactory_Space(context);
        validateFinally(context);
    } catch (ValidationFailure vf) {
        CustomaryContext.create(context).throwPreConditionViolation(context, FactoryStringPool.get(context, "0.0.2" /* Creation failed, invalid factory parameters */));
        throw (ExceptionPreConditionViolation) null; // compiler insists
    }
    

    if (instance == null) {
      instance = this.internalCreateInstance(context);
    }

    prepareInstanceAttributesFactory_Space(context, instance);

    instance.initialiseClass_Space(context);

    try {
        instance.validateinstanceClass_Space(context);
    } catch (ValidationFailure vf) {
        CustomaryContext.create(context).throwInvalidState(context, vf, FactoryStringPool.get(context, "0.0.5" /* Creation failed, instance is invalid despite valid factory parameters */));
        throw (ExceptionInvalidState) null; // compiler insists
    }
    
    return instance;
  }
  
    protected Class_Space internalCreateInstance(CallContext context) {
      return new Class_Space(context);
    }
  

    static public Space tryConstruct(CallContext context, Vector_Space_long_ super_space_vector, Vector_Space_long_ sub_space_vector, Vector_Space_long_ known_space_vector, Vector_Service_long_ service_vector, Vector_Object_long_ content_vector, Vector_DataSource_long_ super_space_source_vector, Vector_DataSource_long_ sub_space_source_vector, Vector_DataSource_long_ known_space_source_vector) {
        return construct(context, super_space_vector, sub_space_vector, known_space_vector, service_vector, content_vector, super_space_source_vector, sub_space_source_vector, known_space_source_vector);
    }

    static public Space construct(CallContext context, Vector_Space_long_ super_space_vector, Vector_Space_long_ sub_space_vector, Vector_Space_long_ known_space_vector, Vector_Service_long_ service_vector, Vector_Object_long_ content_vector, Vector_DataSource_long_ super_space_source_vector, Vector_DataSource_long_ sub_space_source_vector, Vector_DataSource_long_ known_space_source_vector)
        // throws ValidationFailure
        // sollte der hier ja werfen duerfen, demnaechst mal vorsichtig enablen
        {
        Factory_Space __factory__ = new Factory_Space(context);

          __factory__.setSuperSpaces(context, super_space_vector);
          __factory__.setSubSpaces(context, sub_space_vector);
          __factory__.setKnownSpaces(context, known_space_vector);
          __factory__.setServices(context, service_vector);
          __factory__.setContents(context, content_vector);
          __factory__.setSuperSpaceSources(context, super_space_source_vector);
          __factory__.setSubSpaceSources(context, sub_space_source_vector);
          __factory__.setKnownSpaceSources(context, known_space_source_vector);
        

        // naja, hier muesste die loop ueber die basisklassen attribute hin,
        // das gibts leider aktuell nicht, also warten bis DynMDA laeuft
        return __factory__.mustCreateSpace(context);
    }

    static public Space tryConstruct(CallContext context, Vector_Space_long_ super_space_vector, Vector_Space_long_ sub_space_vector, Vector_Space_long_ known_space_vector, Vector_Service_long_ service_vector, Vector_Object_long_ content_vector, Vector_DataSource_long_ super_space_source_vector, Vector_DataSource_long_ sub_space_source_vector, Vector_DataSource_long_ known_space_source_vector, String id, String name)
        // throws ValidationFailure
        // sollte der hier ja werfen duerfen, demnaechst mal vorsichtig enablen
        {
        return construct(context, super_space_vector, sub_space_vector, known_space_vector, service_vector, content_vector, super_space_source_vector, sub_space_source_vector, known_space_source_vector, id, name);
    }

    static public Space construct(CallContext context, Vector_Space_long_ super_space_vector, Vector_Space_long_ sub_space_vector, Vector_Space_long_ known_space_vector, Vector_Service_long_ service_vector, Vector_Object_long_ content_vector, Vector_DataSource_long_ super_space_source_vector, Vector_DataSource_long_ sub_space_source_vector, Vector_DataSource_long_ known_space_source_vector, String id, String name) {
        Factory_Space __factory__ = new Factory_Space(context);

          __factory__.setId(context, id);
          __factory__.setName(context, name);
          __factory__.setSuperSpaces(context, super_space_vector);
          __factory__.setSubSpaces(context, sub_space_vector);
          __factory__.setKnownSpaces(context, known_space_vector);
          __factory__.setServices(context, service_vector);
          __factory__.setContents(context, content_vector);
          __factory__.setSuperSpaceSources(context, super_space_source_vector);
          __factory__.setSubSpaceSources(context, sub_space_source_vector);
          __factory__.setKnownSpaceSources(context, known_space_source_vector);
        

        // naja, hier muesste die loop ueber die basisklassen attribute hin,
        // das gibts leider aktuell nicht, also warten bis DynMDA laeuft
        return __factory__.mustCreateSpace(context);
    }

    public Object createObject    (CallContext context) throws ValidationFailure {
        return createSpace(context);
    }

    public void validate(CallContext call_context) throws ValidationFailure {
        CallContext context = call_context;
        validateFactory_Space(context);
    }

    public void validateFactory_Space(CallContext call_context) throws ValidationFailure {
        Context context = (Context) call_context;
        ValidationFailure vf = validateFactory_Space(context, null);
        if (vf != null) { throw vf; }
    }

    protected ValidationFailure validateFactory_Space(CallContext call_context, ValidationFailure vf) {
        Context context = (Context) call_context;
        try {
            validateId(context);
        } catch (ValidationFailure vfe) {
            if (vf == null) {
                vf = ValidationFailure.createValidationFailure(context, FactoryStringPool.get(context, "0.0.4" /* Some factory parameters are invalid. */));
            }
            vf.addCause(context, vfe);
        }
        try {
            validateName(context);
        } catch (ValidationFailure vfe) {
            if (vf == null) {
                vf = ValidationFailure.createValidationFailure(context, FactoryStringPool.get(context, "0.0.4" /* Some factory parameters are invalid. */));
            }
            vf.addCause(context, vfe);
        }
        return vf;
    }

    public Space mustCreate (CallContext context) {
        return mustCreateSpace(context);
    }

  

  

    
    
    
    
    
    
    
    
    
    
  

}

